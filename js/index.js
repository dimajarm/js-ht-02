let n;
do {
    n = parseInt(prompt('–ü—Ä–∏–≤—ñ—Ç! üò∫ –Ø –∫–æ—Ç–∏–∫ –§—ñ–±–æ–Ω–∞—á—á—ñ —ñ –∑–Ω–∞—é –≤—Å—ñ –π–æ–≥–æ —á–∏—Å–ª–∞. –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ? –í–≤–µ–¥–∏ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä: '));
} while (isNaN(n))

function fibonachi(n) {
    let one = 1;
    let two = 1;
    for (let i = 3; i <= n; i++) {
        const three = one + two;
        one = two;
        two = three;
    }
    return two;
}



function fibonachiArray(n) {
    let fibNums = [1, 1];
    for (let i = 3; i <= n; i++) {
        let nextFib = (fibNums[(i - 2)] + fibNums[(i - 1)]);
        fibNums.push(nextFib);
    }
    return fibNums[n - 1];
}



function fibonachiRecursion(n) {
    return n <= 1 ? n : fibonachiRecursion(n - 1) + fibonachiRecursion(n - 2);
}



const resultRecursion = fibonachiRecursion(n);
const resultArray = fibonachiArray(n);

const result = fibonachi(n);

alert('üò∫ –º—è—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —Ü–∏–∫–ª—É =' + result + ' —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –º–∞—Å—Å–∏–≤—É=' + resultArray + '—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —Ä–µ–∫—É—Ä—Å—ñ—ó =' + resultRecursion);
